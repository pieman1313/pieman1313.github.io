{"version":3,"sources":["components/menu-button/menu-button.tsx","components/audio/audio.tsx","components/mobile-controls/mobile-controls.tsx","components/snake-game/util/Renderer.ts","components/snake-game/snake-game.tsx","engine/Cell.ts","engine/Utils/utils.ts","engine/Board.ts","engine/CellPositionService.ts","engine/Utils/GameSnapshotSubject.ts","engine/Utils/TriggerSubject.ts","engine/Game.ts","engine/Utils/DirectionSubject.ts","engine/KeyboardService.ts","engine/ScoreService.ts","engine/Utils/TimerService.ts","components/card/card.tsx","components/menu-link/menu-link.tsx","pages/game/game-over/game-over.tsx","pages/game/paused/paused.tsx","pages/game/score/score.tsx","pages/game/game.tsx","components/demo-snake-game/DemoKeyboardService.ts","components/demo-snake-game/demo-snake-game.tsx","pages/high-score/high-score.tsx","pages/home/home-menu/home-menu.tsx","pages/home/home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MenuButton","onClick","children","className","type","Audio","useState","muted","setMuted","audio","setAudio","useEffect","sound","window","document","addEventListener","playAudio","removeEventListener","play","mute","pause","MobileControls","trigger","key","ev","KeyboardEvent","dispatchEvent","Renderer","width","height","boardCssClass","d3","append","attr","cells","cellSize","blocks","selectAll","data","d","JSON","stringify","enter","point","x","y","exit","remove","images","SnakeGame","gameEngine","boardRef","useRef","onSnapshotSubject","attach","renderGame","getSize","widthCells","heightCells","generateBoard","startGame","handleViewportResize","gameSnapshot","cherries","mushrooms","pizzas","snake","walls","forEach","cell","push","renderBlocks","renderImages","boardBoundingRect","current","getBoundingClientRect","Math","floor","endGame","setSize","ref","Cell","this","randomBetween","min","max","random","DirectionVector","up","down","left","right","Board","autoGenerateFood","cellPositionService","snakeCells","maxFood","init","clear","generateMaxFoodFromCellNumber","initSnake","initWalls","initFood","i","j","set","leftWallcell","rightWallcell","totalFood","getRandomFreeCoordinates","head","tail","direction","getNextCellCoordinates","existingCell","get","newSnakeCell","unshift","createNewFood","snakeTail","pop","getAll","directionVectorX","directionVectorY","snakeHead","has","CellPositionService","positions","Map","delete","Array","from","values","GameSnapshotSubject","observers","observer","filter","currentObserver","snapshot","TriggerSubject","Scores","Game","initialSpeed","keyboardService","scoreService","board","timerService","speed","state","currentDirection","timeout","reverseDirectionTimer","onPauseSubject","onGameOverSubject","revertControls","bind","tick","onDirectionChange","onSpaceHandler","onSpaceSubject","onDirectionSubject","setTimeout","save","clearTimeout","notify","resume","reset","cancel","resumeGame","pauseGame","moveSnake","getCells","nextCell","getNextSnakeCellByDirection","add","inverseControls","score","start","inverse","destroy","DirectionSubject","KeyboardService","isInverse","keyDownHandler","event","ScoreService","scores","getScores","newScores","sort","a","b","splice","uniqueScores","Set","localStorage","setItem","savedScores","getItem","parse","map","Number","TimerService","timerId","startTime","Date","remaining","callback","onCallback","delay","getTime","Card","clsx","defaultProps","MenuLink","to","GameOver","onRestart","Paused","Score","setScore","gameOver","setGameOver","paused","setPaused","game","setGame","engine","initGame","GameEngine","getState","pausedState","restartGame","directions","DemoKeyboardService","interval","triggerRandomDirectionKey","setInterval","clearInterval","length","DemoSnakeGame","HighScore","content","reverse","HomeMenu","Home","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.394f30f4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './menu-button.scss';\r\n\r\ninterface MenuButtonProps {\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n  children: React.ReactNode;\r\n}\r\n\r\nfunction MenuButton({ onClick, children }: MenuButtonProps) {\r\n  return (\r\n    <button className=\"menu-button\" onClick={onClick} type=\"button\">\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default MenuButton;\r\n","import React, { useEffect, useState } from 'react';\n\nimport MenuButton from '../menu-button/menu-button';\nimport './audio.scss';\n\nconst muteSpeaker = '🔈';\nconst speaker = '🔊';\n\nfunction Audio() {\n  const [muted, setMuted] = useState(false);\n  const [audio, setAudio] = useState<HTMLAudioElement | null>(null);\n\n  useEffect(() => {\n    const sound = new window.Audio('/assets/retro.mp3');\n    setAudio(sound);\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener('click', playAudio);\n    return () => {\n      document.removeEventListener('click', playAudio);\n    };\n  }, [audio]);\n\n  const playAudio = () => {\n    if (audio) {\n      audio.play();\n      document.removeEventListener('click', playAudio);\n    }\n  };\n\n  return (\n    <div className=\"audio\">\n      <MenuButton\n        onClick={() => {\n          setMuted((mute) => {\n            if (audio) {\n              mute ? audio.play() : audio.pause();\n            }\n\n            return !mute;\n          });\n        }}\n      >\n        {muted ? muteSpeaker : speaker}\n      </MenuButton>\n    </div>\n  );\n}\n\nexport default Audio;\n","import React from 'react';\n\nimport MenuButton from '../menu-button/menu-button';\nimport './mobile-controls.scss';\n\nfunction MobileControls() {\n  const trigger = (key: string) => {\n    const ev = new KeyboardEvent('keydown', { key });\n    window.dispatchEvent(ev);\n  };\n\n  return (\n    <div className=\"mobile-controls\">\n      <div className=\"mobile-controls__up-container\">\n        <MenuButton\n          onClick={() => {\n            trigger('w');\n          }}\n        >\n          &uarr;\n        </MenuButton>\n      </div>\n      <div className=\"mobile-controls__left-right-container\">\n        <MenuButton\n          onClick={() => {\n            trigger('a');\n          }}\n        >\n          &larr;\n        </MenuButton>\n        <MenuButton\n          onClick={() => {\n            trigger(' ');\n          }}\n        >\n          P\n        </MenuButton>\n        <MenuButton\n          onClick={() => {\n            trigger('d');\n          }}\n        >\n          &rarr;\n        </MenuButton>\n      </div>\n      <div className=\"mobile-controls__down-container\">\n        <MenuButton\n          onClick={() => {\n            trigger('s');\n          }}\n        >\n          &darr;\n        </MenuButton>\n      </div>\n    </div>\n  );\n}\n\nexport default MobileControls;\n","import * as d3 from 'd3';\r\n\r\nimport Cell, { CellType } from '../../../engine/Cell';\r\n\r\nexport default class Renderer {\r\n  static generateBoard(width: number, height: number, boardCssClass: string) {\r\n    d3.select(`.${boardCssClass}`)\r\n      .append('svg')\r\n      .attr('class', 'snake-game__svg')\r\n      .attr('width', width)\r\n      .attr('height', height);\r\n  }\r\n\r\n  static renderBlocks(type: CellType, cells: Cell[], cellSize: number) {\r\n    const svg = d3.select('.snake-game__svg');\r\n\r\n    const blocks = svg\r\n      .selectAll(`rect.${type}`)\r\n      .data(cells, (d) => JSON.stringify(d));\r\n\r\n    blocks\r\n      .enter()\r\n      .append('rect')\r\n      .attr('class', type)\r\n      .attr('width', cellSize)\r\n      .attr('height', cellSize)\r\n      .attr('x', (point) => point.x * cellSize)\r\n      .attr('y', (point) => point.y * cellSize);\r\n\r\n    blocks.exit().remove();\r\n  }\r\n\r\n  static renderImages(type: CellType, cells: Cell[], cellSize: number) {\r\n    const svg = d3.select('.snake-game__svg');\r\n\r\n    const images = svg\r\n      .selectAll(`image.${type}`)\r\n      .data(cells, (d) => JSON.stringify(d));\r\n\r\n    images\r\n      .enter()\r\n      .append('svg:image')\r\n      .attr('class', type)\r\n      .attr('width', cellSize)\r\n      .attr('height', cellSize)\r\n      .attr('x', (point) => point.x * cellSize)\r\n      .attr('y', (point) => point.y * cellSize)\r\n      .attr('xlink:href', `/assets/${type}.svg`);\r\n\r\n    images.exit().remove();\r\n  }\r\n\r\n  static remove() {\r\n    d3.select('.snake-game__svg').remove();\r\n  }\r\n}\r\n","import React, { MutableRefObject, useEffect, useRef } from 'react';\r\n\r\nimport Cell from '../../engine/Cell';\r\nimport GameEngine from '../../engine/Game';\r\nimport { GameSnapshot } from '../../engine/Utils/utils';\r\nimport './snake-game.scss';\r\nimport Renderer from './util/Renderer';\r\n\r\nconst cellSize = 35;\r\n\r\ninterface SnakeGameProps {\r\n  gameEngine: GameEngine | null;\r\n}\r\n\r\nfunction SnakeGame({ gameEngine }: SnakeGameProps) {\r\n  const boardRef = useRef<HTMLDivElement>() as MutableRefObject<HTMLDivElement>;\r\n\r\n  useEffect(() => {\r\n    if (gameEngine) {\r\n      gameEngine.onSnapshotSubject.attach(renderGame);\r\n\r\n      const { widthCells, heightCells } = gameEngine.getSize();\r\n\r\n      Renderer.generateBoard(\r\n        widthCells * cellSize,\r\n        heightCells * cellSize,\r\n        'snake-game__board'\r\n      );\r\n\r\n      gameEngine.startGame();\r\n    }\r\n\r\n    window.addEventListener('resize', handleViewportResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleViewportResize);\r\n    };\r\n  }, [gameEngine]);\r\n\r\n  const renderGame = (gameSnapshot: GameSnapshot) => {\r\n    const cherries: Cell[] = [];\r\n    const mushrooms: Cell[] = [];\r\n    const pizzas: Cell[] = [];\r\n    const snake: Cell[] = [];\r\n    const walls: Cell[] = [];\r\n\r\n    gameSnapshot.cells.forEach((cell) => {\r\n      switch (cell.type) {\r\n        case 'cherry':\r\n          cherries.push(cell);\r\n          break;\r\n        case 'mushroom':\r\n          mushrooms.push(cell);\r\n          break;\r\n        case 'pizza':\r\n          pizzas.push(cell);\r\n          break;\r\n        case 'snake':\r\n          snake.push(cell);\r\n          break;\r\n        case 'wall':\r\n          walls.push(cell);\r\n      }\r\n    });\r\n\r\n    Renderer.renderBlocks('wall', walls, cellSize);\r\n    Renderer.renderImages('cherry', cherries, cellSize);\r\n    Renderer.renderImages('mushroom', mushrooms, cellSize);\r\n    Renderer.renderImages('pizza', pizzas, cellSize);\r\n    Renderer.renderBlocks('snake', snake, cellSize);\r\n  };\r\n\r\n  const handleViewportResize = () => {\r\n    const boardBoundingRect = boardRef.current.getBoundingClientRect();\r\n\r\n    if (gameEngine) {\r\n      Renderer.remove();\r\n\r\n      const widthCells = Math.floor(boardBoundingRect.width / cellSize);\r\n      const heightCells = Math.floor(boardBoundingRect.height / cellSize);\r\n\r\n      gameEngine.endGame();\r\n      gameEngine.setSize(widthCells, heightCells);\r\n\r\n      Renderer.generateBoard(\r\n        widthCells * cellSize,\r\n        heightCells * cellSize,\r\n        'snake-game__board'\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"snake-game\">\r\n      <div className=\"snake-game__board\" ref={boardRef} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SnakeGame;\r\n","export type CellType =\r\n  | 'snake'\r\n  | 'cherry'\r\n  | 'mushroom'\r\n  | 'pizza'\r\n  | 'empty'\r\n  | 'wall';\r\n\r\ninterface CellConfig {\r\n  x: number;\r\n  y: number;\r\n  type: CellType;\r\n}\r\n\r\nexport default class Cell {\r\n  public x: number;\r\n\r\n  public y: number;\r\n\r\n  public type: CellType;\r\n\r\n  constructor({ x, y, type }: CellConfig) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.type = type;\r\n  }\r\n}\r\n","import Cell from '../Cell';\r\n\r\nexport function randomBetween(min: number = 0, max: number = 1) {\r\n  return Math.floor(Math.random() * max) + min;\r\n}\r\n\r\nexport type Direction = 'up' | 'down' | 'left' | 'right';\r\n\r\nexport interface GameSnapshot {\r\n  cells: Cell[];\r\n  score: number;\r\n}\r\n\r\nexport interface GameWindow {\r\n  setTimeout(handler: TimerHandler, timeout?: number | undefined): number;\r\n  clearTimeout(handle?: number | undefined): void;\r\n  setInterval(handler: TimerHandler, timeout?: number | undefined): number;\r\n  clearInterval(handle?: number | undefined): void;\r\n  addEventListener(\r\n    type: 'keydown',\r\n    listener: (this: Window, ev: KeyboardEvent) => void\r\n  ): void;\r\n  removeEventListener(\r\n    type: 'keydown',\r\n    listener: (this: Window, ev: KeyboardEvent) => void\r\n  ): void;\r\n  dispatchEvent: (event: Event) => boolean;\r\n}\r\n","import Cell, { CellType } from './Cell';\r\nimport { ICellPositionService } from './CellPositionService';\r\nimport { Direction, randomBetween } from './Utils/utils';\r\n\r\nexport interface IBoard {\r\n  moveSnake: (direction: Direction) => void;\r\n  getCells: () => Cell[];\r\n  getNextSnakeCellByDirection: (direction: Direction) => Cell;\r\n  reset: () => void;\r\n  setSize: (widthCells: number, heightCells: number) => void;\r\n  getSize: () => { widthCells: number; heightCells: number };\r\n  destroy: () => void;\r\n}\r\n\r\ninterface BoardConfig {\r\n  widthCells: number;\r\n  heightCells: number;\r\n  autoGenerateFood?: boolean;\r\n  cellPositionService: ICellPositionService;\r\n}\r\n\r\nconst DirectionVector = {\r\n  up: {\r\n    x: 0,\r\n    y: -1,\r\n  },\r\n  down: {\r\n    x: 0,\r\n    y: 1,\r\n  },\r\n  left: {\r\n    x: -1,\r\n    y: 0,\r\n  },\r\n  right: {\r\n    x: 1,\r\n    y: 0,\r\n  },\r\n};\r\n\r\nexport default class Board implements IBoard {\r\n  private widthCells: number = 0;\r\n\r\n  private heightCells: number = 0;\r\n\r\n  private snakeCells: Cell[] = [];\r\n\r\n  private autoGenerateFood = true;\r\n\r\n  private maxFood = 0;\r\n\r\n  private cellPositionService: ICellPositionService;\r\n\r\n  constructor({\r\n    widthCells = 10,\r\n    heightCells = 10,\r\n    autoGenerateFood = true,\r\n    cellPositionService,\r\n  }: BoardConfig) {\r\n    this.cellPositionService = cellPositionService;\r\n    this.autoGenerateFood = autoGenerateFood;\r\n\r\n    this.init(widthCells, heightCells);\r\n  }\r\n\r\n  private init(widthCells: number, heightCells: number) {\r\n    this.cellPositionService.clear();\r\n\r\n    this.widthCells = widthCells;\r\n    this.heightCells = heightCells;\r\n\r\n    if (this.autoGenerateFood) {\r\n      this.maxFood = this.generateMaxFoodFromCellNumber();\r\n    }\r\n\r\n    this.initSnake();\r\n\r\n    this.initWalls();\r\n\r\n    this.initFood(this.maxFood, 'cherry');\r\n    this.initFood(this.maxFood, 'mushroom');\r\n    this.initFood(this.maxFood, 'pizza');\r\n  }\r\n\r\n  private initWalls() {\r\n    for (let i = 0; i < this.heightCells; i++) {\r\n      if (i === 0 || i === this.heightCells - 1) {\r\n        for (let j = 0; j < this.widthCells; j++) {\r\n          const cell = new Cell({ x: j, y: i, type: 'wall' });\r\n\r\n          this.cellPositionService.set(cell);\r\n        }\r\n      } else {\r\n        const leftWallcell = new Cell({ x: 0, y: i, type: 'wall' });\r\n        const rightWallcell = new Cell({\r\n          x: this.widthCells - 1,\r\n          y: i,\r\n          type: 'wall',\r\n        });\r\n\r\n        this.cellPositionService.set(leftWallcell);\r\n        this.cellPositionService.set(rightWallcell);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initFood(totalFood: number, type: CellType) {\r\n    for (let i = 0; i < totalFood; i++) {\r\n      const { x, y } = this.getRandomFreeCoordinates();\r\n\r\n      const cell = new Cell({ x, y, type });\r\n\r\n      this.cellPositionService.set(cell);\r\n    }\r\n  }\r\n\r\n  private initSnake() {\r\n    const x = Math.floor((this.widthCells - 2) / 2);\r\n    const y = Math.floor((this.heightCells - 2) / 2);\r\n\r\n    const head = new Cell({ x, y, type: 'snake' });\r\n    this.cellPositionService.set(head);\r\n\r\n    const tail = new Cell({ x: x - 1, y, type: 'snake' });\r\n    this.cellPositionService.set(tail);\r\n\r\n    this.snakeCells.push(head, tail);\r\n  }\r\n\r\n  private createNewFood(type: CellType) {\r\n    const { x, y } = this.getRandomFreeCoordinates();\r\n    const cell = new Cell({ x, y, type });\r\n\r\n    this.cellPositionService.set(cell);\r\n  }\r\n\r\n  public moveSnake(direction: Direction) {\r\n    const { x, y } = this.getNextCellCoordinates(direction);\r\n\r\n    const existingCell = this.cellPositionService.get(x, y);\r\n\r\n    const newSnakeCell = new Cell({ x, y, type: 'snake' });\r\n\r\n    this.snakeCells.unshift(newSnakeCell);\r\n    this.cellPositionService.set(newSnakeCell);\r\n\r\n    if (!existingCell) {\r\n      const snakeTail = this.snakeCells.pop() as Cell;\r\n      this.cellPositionService.remove(snakeTail);\r\n    } else {\r\n      this.createNewFood(existingCell.type);\r\n    }\r\n  }\r\n\r\n  public getCells() {\r\n    return this.cellPositionService.getAll();\r\n  }\r\n\r\n  public getNextSnakeCellByDirection(direction: Direction): Cell {\r\n    const { x, y } = this.getNextCellCoordinates(direction);\r\n\r\n    const cell = this.cellPositionService.get(x, y);\r\n\r\n    if (cell) {\r\n      return cell;\r\n    }\r\n\r\n    return new Cell({\r\n      x,\r\n      y,\r\n      type: 'empty',\r\n    });\r\n  }\r\n\r\n  private getNextCellCoordinates(\r\n    direction: Direction\r\n  ): { x: number; y: number } {\r\n    const directionVectorX = DirectionVector[direction].x;\r\n    const directionVectorY = DirectionVector[direction].y;\r\n\r\n    const snakeHead = this.snakeCells[0];\r\n\r\n    const snakeX = snakeHead.x;\r\n    const snakeY = snakeHead.y;\r\n\r\n    const nextX = snakeX + directionVectorX;\r\n    const nextY = snakeY + directionVectorY;\r\n\r\n    return {\r\n      x: nextX,\r\n      y: nextY,\r\n    };\r\n  }\r\n\r\n  private getRandomFreeCoordinates() {\r\n    let x = randomBetween(1, this.widthCells - 1);\r\n    let y = randomBetween(1, this.heightCells - 1);\r\n\r\n    while (this.cellPositionService.has(x, y)) {\r\n      x = randomBetween(1, this.widthCells - 1);\r\n      y = randomBetween(1, this.heightCells - 1);\r\n    }\r\n\r\n    return { x, y };\r\n  }\r\n\r\n  public reset() {\r\n    this.cellPositionService.clear();\r\n    this.snakeCells = [];\r\n\r\n    this.initSnake();\r\n\r\n    this.initWalls();\r\n\r\n    this.initFood(this.maxFood, 'cherry');\r\n    this.initFood(this.maxFood, 'mushroom');\r\n    this.initFood(this.maxFood, 'pizza');\r\n  }\r\n\r\n  private generateMaxFoodFromCellNumber() {\r\n    const cells = this.widthCells * this.heightCells;\r\n    if (cells < 700) return 1;\r\n    if (cells < 1400) return 2;\r\n    if (cells < 2100) return 3;\r\n    return 4;\r\n  }\r\n\r\n  public setSize(widthCells: number, heightCells: number) {\r\n    this.init(widthCells, heightCells);\r\n  }\r\n\r\n  public getSize(): { widthCells: number; heightCells: number } {\r\n    return {\r\n      widthCells: this.widthCells,\r\n      heightCells: this.heightCells,\r\n    };\r\n  }\r\n\r\n  public destroy() {\r\n    this.cellPositionService.clear();\r\n    this.snakeCells = [];\r\n  }\r\n}\r\n","import Cell from './Cell';\r\n\r\nexport interface ICellPositionService {\r\n  set: (cell: Cell) => void;\r\n  remove: (cell: Cell) => void;\r\n  has: (x: number, y: number) => boolean;\r\n  get: (x: number, y: number) => Cell;\r\n  getAll: () => Cell[];\r\n  clear: () => void;\r\n}\r\n\r\nexport default class CellPositionService implements ICellPositionService {\r\n  private positions = new Map();\r\n\r\n  public set(cell: Cell) {\r\n    this.positions.set(`${cell.x},${cell.y}`, cell);\r\n  }\r\n\r\n  public remove(cell: Cell) {\r\n    this.positions.delete(`${cell.x},${cell.y}`);\r\n  }\r\n\r\n  public has(x: number, y: number): boolean {\r\n    return this.positions.has(`${x},${y}`);\r\n  }\r\n\r\n  public get(x: number, y: number): Cell {\r\n    return this.positions.get(`${x},${y}`);\r\n  }\r\n\r\n  public getAll() {\r\n    return Array.from(this.positions.values());\r\n  }\r\n\r\n  public clear() {\r\n    this.positions.clear();\r\n  }\r\n}\r\n","import { GameSnapshot } from './utils';\r\n\r\nexport type GameSnapshotObserver = (snapshot: GameSnapshot) => void;\r\n\r\nexport default class GameSnapshotSubject {\r\n  private observers: GameSnapshotObserver[] = [];\r\n\r\n  public attach(observer: GameSnapshotObserver) {\r\n    this.observers.push(observer);\r\n  }\r\n\r\n  public detach(observer: GameSnapshotObserver) {\r\n    this.observers = this.observers.filter(\r\n      (currentObserver) => currentObserver !== observer\r\n    );\r\n  }\r\n\r\n  public notify(snapshot: GameSnapshot) {\r\n    this.observers.forEach((observer) => observer(snapshot));\r\n  }\r\n\r\n  public destroy() {\r\n    this.observers = [];\r\n  }\r\n}\r\n","export type TriggerObserver = () => void;\r\n\r\nexport default class TriggerSubject {\r\n  private observers: TriggerObserver[] = [];\r\n\r\n  public attach(observer: TriggerObserver) {\r\n    this.observers.push(observer);\r\n  }\r\n\r\n  public detach(observer: TriggerObserver) {\r\n    this.observers = this.observers.filter(\r\n      (currentObserver) => currentObserver !== observer\r\n    );\r\n  }\r\n\r\n  public notify() {\r\n    this.observers.forEach((observer) => observer());\r\n  }\r\n\r\n  public destroy() {\r\n    this.observers = [];\r\n  }\r\n}\r\n","import { IBoard } from './Board';\r\nimport { IKeyboardService } from './KeyboardService';\r\nimport { IScoreService } from './ScoreService';\r\nimport GameSnapshotSubject from './Utils/GameSnapshotSubject';\r\nimport { ITimerService } from './Utils/TimerService';\r\nimport TriggerSubject from './Utils/TriggerSubject';\r\nimport { Direction, GameWindow } from './Utils/utils';\r\n\r\nconst Scores = {\r\n  cherry: 100,\r\n  mushroom: 350,\r\n  pizza: 400,\r\n};\r\n\r\ninterface GameConfig {\r\n  initialSpeed?: number;\r\n  window: GameWindow;\r\n  keyboardService: IKeyboardService;\r\n  scoreService: IScoreService;\r\n  board: IBoard;\r\n  timerService: ITimerService;\r\n}\r\n\r\ntype GameState = 'not-started' | 'started' | 'paused' | 'over';\r\n\r\nexport default class Game {\r\n  private window: GameWindow;\r\n\r\n  private speed: number;\r\n\r\n  private state: GameState = 'not-started';\r\n\r\n  private board: IBoard;\r\n\r\n  private keyboardService: IKeyboardService;\r\n\r\n  private timerService: ITimerService;\r\n\r\n  private scoreService: IScoreService;\r\n\r\n  private currentDirection: Direction = 'right';\r\n\r\n  private timeout: number | null = null;\r\n\r\n  private reverseDirectionTimer: number | null = null;\r\n\r\n  public onPauseSubject = new TriggerSubject();\r\n\r\n  public onGameOverSubject = new TriggerSubject();\r\n\r\n  public onSnapshotSubject = new GameSnapshotSubject();\r\n\r\n  constructor({\r\n    initialSpeed = 300,\r\n    window,\r\n    keyboardService,\r\n    scoreService,\r\n    board,\r\n    timerService,\r\n  }: GameConfig) {\r\n    this.window = window;\r\n    this.keyboardService = keyboardService;\r\n    this.scoreService = scoreService;\r\n    this.board = board;\r\n    this.timerService = timerService;\r\n\r\n    this.speed = initialSpeed;\r\n\r\n    this.revertControls = this.revertControls.bind(this);\r\n    this.tick = this.tick.bind(this);\r\n    this.onDirectionChange = this.onDirectionChange.bind(this);\r\n    this.onSpaceHandler = this.onSpaceHandler.bind(this);\r\n\r\n    this.keyboardService.onSpaceSubject.attach(this.onSpaceHandler);\r\n    this.keyboardService.onDirectionSubject.attach(this.onDirectionChange);\r\n\r\n    this.keyboardService.init();\r\n  }\r\n\r\n  public startGame() {\r\n    this.state = 'started';\r\n    this.setTimeout();\r\n  }\r\n\r\n  public endGame() {\r\n    if (this.state === 'over') return;\r\n    if (this.scoreService.get()) this.scoreService.save();\r\n    this.state = 'over';\r\n    this.clearTimeout();\r\n    this.onGameOverSubject.notify();\r\n  }\r\n\r\n  private pauseGame() {\r\n    this.state = 'paused';\r\n    if (this.reverseDirectionTimer) {\r\n      this.timerService.pause();\r\n    }\r\n    this.clearTimeout();\r\n  }\r\n\r\n  private resumeGame() {\r\n    this.state = 'started';\r\n    this.setTimeout();\r\n    if (this.reverseDirectionTimer) {\r\n      this.timerService.resume();\r\n    }\r\n  }\r\n\r\n  public restartGame() {\r\n    this.scoreService.reset();\r\n    this.speed = 300;\r\n    this.board.reset();\r\n    this.currentDirection = 'right';\r\n    if (this.reverseDirectionTimer) {\r\n      this.timerService.cancel();\r\n      this.revertControls();\r\n    }\r\n    this.state = 'started';\r\n    this.setTimeout();\r\n  }\r\n\r\n  private onDirectionChange(direction: Direction) {\r\n    if (this.state === 'paused') return;\r\n\r\n    if (this.currentDirection === direction) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      (direction === 'up' && this.currentDirection === 'down') ||\r\n      (direction === 'down' && this.currentDirection === 'up') ||\r\n      (direction === 'left' && this.currentDirection === 'right') ||\r\n      (direction === 'right' && this.currentDirection === 'left')\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    this.currentDirection = direction;\r\n  }\r\n\r\n  private onSpaceHandler() {\r\n    if (this.state === 'paused') {\r\n      this.state = 'started';\r\n      this.resumeGame();\r\n    } else {\r\n      this.state = 'paused';\r\n      this.pauseGame();\r\n    }\r\n    this.onPauseSubject.notify();\r\n  }\r\n\r\n  private moveSnake() {\r\n    this.board.moveSnake(this.currentDirection);\r\n  }\r\n\r\n  public getCells() {\r\n    return this.board.getCells();\r\n  }\r\n\r\n  private tick() {\r\n    const nextCell = this.board.getNextSnakeCellByDirection(\r\n      this.currentDirection\r\n    );\r\n\r\n    this.timeout = this.window.setTimeout(this.tick, this.speed);\r\n\r\n    switch (nextCell.type) {\r\n      case 'empty':\r\n        this.moveSnake();\r\n        break;\r\n      case 'cherry':\r\n        this.moveSnake();\r\n        this.scoreService.add(Scores.cherry);\r\n        break;\r\n      case 'mushroom':\r\n        this.moveSnake();\r\n        this.scoreService.add(Scores.mushroom);\r\n        this.inverseControls();\r\n        break;\r\n      case 'pizza':\r\n        this.moveSnake();\r\n        this.scoreService.add(Scores.pizza);\r\n        if (this.speed - 30 > 0) {\r\n          this.speed -= 30;\r\n        }\r\n        break;\r\n      case 'wall':\r\n      case 'snake':\r\n        this.endGame();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    this.onSnapshotSubject.notify({\r\n      cells: this.board.getCells(),\r\n      score: this.scoreService.get(),\r\n    });\r\n  }\r\n\r\n  private setTimeout() {\r\n    this.timeout = this.window.setTimeout(this.tick, this.speed);\r\n  }\r\n\r\n  private clearTimeout() {\r\n    if (this.timeout) {\r\n      this.window.clearTimeout(this.timeout);\r\n      this.timeout = null;\r\n    }\r\n  }\r\n\r\n  private inverseControls() {\r\n    if (!this.reverseDirectionTimer) {\r\n      this.reverseDirectionTimer = this.timerService.start(\r\n        this.revertControls,\r\n        30000\r\n      );\r\n      this.keyboardService.inverse();\r\n    }\r\n  }\r\n\r\n  private revertControls() {\r\n    this.keyboardService.inverse();\r\n    this.reverseDirectionTimer = null;\r\n  }\r\n\r\n  public setSize(widthCells: number, heightCells: number) {\r\n    this.board.setSize(widthCells, heightCells);\r\n  }\r\n\r\n  public getSize(): { widthCells: number; heightCells: number } {\r\n    return this.board.getSize();\r\n  }\r\n\r\n  public getState() {\r\n    return this.state;\r\n  }\r\n\r\n  public getSpeed() {\r\n    return this.speed;\r\n  }\r\n\r\n  public destroy() {\r\n    this.clearTimeout();\r\n\r\n    this.onPauseSubject.destroy();\r\n    this.onGameOverSubject.destroy();\r\n    this.onSnapshotSubject.destroy();\r\n\r\n    this.board.destroy();\r\n\r\n    this.keyboardService.destroy();\r\n\r\n    if (this.timerService) this.timerService.destroy();\r\n  }\r\n}\r\n","import { Direction } from './utils';\r\n\r\nexport type DirectionObserver = (direction: Direction) => void;\r\n\r\nexport default class DirectionSubject {\r\n  private observers: DirectionObserver[] = [];\r\n\r\n  public attach(observer: DirectionObserver) {\r\n    this.observers.push(observer);\r\n  }\r\n\r\n  public detach(observer: DirectionObserver) {\r\n    this.observers = this.observers.filter(\r\n      (currentObserver) => currentObserver !== observer\r\n    );\r\n  }\r\n\r\n  public notify(direction: Direction) {\r\n    this.observers.forEach((observer) => observer(direction));\r\n  }\r\n\r\n  public destroy() {\r\n    this.observers = [];\r\n  }\r\n}\r\n","import DirectionSubject from './Utils/DirectionSubject';\r\nimport TriggerSubject from './Utils/TriggerSubject';\r\nimport { GameWindow } from './Utils/utils';\r\n\r\nexport interface IKeyboardService {\r\n  onSpaceSubject: TriggerSubject;\r\n  onDirectionSubject: DirectionSubject;\r\n  init: () => void;\r\n  destroy: () => void;\r\n  inverse: () => void;\r\n}\r\n\r\nexport interface KeyboardServiceConfig {\r\n  window: GameWindow;\r\n}\r\n\r\nexport default class KeyboardService implements IKeyboardService {\r\n  private window: GameWindow;\r\n\r\n  private isInverse = false;\r\n\r\n  public onSpaceSubject = new TriggerSubject();\r\n\r\n  public onDirectionSubject = new DirectionSubject();\r\n\r\n  constructor({ window }: KeyboardServiceConfig) {\r\n    this.window = window;\r\n    this.keyDownHandler = this.keyDownHandler.bind(this);\r\n  }\r\n\r\n  private keyDownHandler(event: KeyboardEvent) {\r\n    switch (event.key) {\r\n      case 'w':\r\n      case 'ArrowUp':\r\n        this.onDirectionSubject.notify(this.isInverse ? 'down' : 'up');\r\n        break;\r\n      case 's':\r\n      case 'ArrowDown':\r\n        this.onDirectionSubject.notify(this.isInverse ? 'up' : 'down');\r\n        break;\r\n      case 'a':\r\n      case 'ArrowLeft':\r\n        this.onDirectionSubject.notify(this.isInverse ? 'right' : 'left');\r\n        break;\r\n      case 'd':\r\n      case 'ArrowRight':\r\n        this.onDirectionSubject.notify(this.isInverse ? 'left' : 'right');\r\n        break;\r\n      case ' ':\r\n        this.onSpaceSubject.notify();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  public init() {\r\n    this.window.addEventListener('keydown', this.keyDownHandler);\r\n  }\r\n\r\n  public destroy() {\r\n    this.window.removeEventListener('keydown', this.keyDownHandler);\r\n    this.onSpaceSubject.destroy();\r\n    this.onDirectionSubject.destroy();\r\n  }\r\n\r\n  public inverse() {\r\n    this.isInverse = !this.isInverse;\r\n  }\r\n}\r\n","export interface IScoreService {\r\n  add: (score: number) => void;\r\n  reset: () => void;\r\n  get: () => number;\r\n  save: () => void;\r\n}\r\n\r\nexport default class ScoreService implements IScoreService {\r\n  static getScores() {\r\n    const savedScores = localStorage.getItem('scores');\r\n    const scores: [] = savedScores ? JSON.parse(savedScores).map(Number) : [];\r\n    return scores;\r\n  }\r\n\r\n  private score = 0;\r\n\r\n  public add(score: number) {\r\n    this.score += score;\r\n  }\r\n\r\n  public reset() {\r\n    this.score = 0;\r\n  }\r\n\r\n  public get(): number {\r\n    return this.score;\r\n  }\r\n\r\n  public save() {\r\n    const scores = ScoreService.getScores();\r\n    const newScores = [...scores, this.score].sort((a, b) => a - b).splice(-5);\r\n    const uniqueScores = new Set(newScores);\r\n    localStorage.setItem('scores', JSON.stringify(Array.from(uniqueScores)));\r\n  }\r\n}\r\n","import { GameWindow } from './utils';\r\n\r\nexport interface ITimerService {\r\n  start: (callback: () => void, delay: number) => number;\r\n  pause: () => void;\r\n  resume: () => void;\r\n  cancel: () => void;\r\n  destroy: () => void;\r\n}\r\n\r\ninterface TimerServiceConfig {\r\n  window: GameWindow;\r\n}\r\n\r\nexport default class TimerService implements ITimerService {\r\n  private window: GameWindow;\r\n\r\n  private timerId: number | null = null;\r\n\r\n  private startTime = new Date();\r\n\r\n  private remaining = 0;\r\n\r\n  private callback = () => {};\r\n\r\n  constructor({ window }: TimerServiceConfig) {\r\n    this.window = window;\r\n    this.onCallback = this.onCallback.bind(this);\r\n  }\r\n\r\n  public start(callback: () => void, delay: number): number {\r\n    if (this.timerId) return this.timerId;\r\n    this.callback = callback;\r\n    this.remaining = delay;\r\n    this.startTime = new Date();\r\n    this.timerId = this.window.setTimeout(this.onCallback, this.remaining);\r\n    return this.timerId;\r\n  }\r\n\r\n  public pause() {\r\n    if (this.timerId) {\r\n      this.window.clearTimeout(this.timerId);\r\n      this.remaining -= new Date().getTime() - this.startTime.getTime();\r\n    }\r\n  }\r\n\r\n  public resume() {\r\n    if (this.timerId) {\r\n      this.startTime = new Date();\r\n      this.window.clearTimeout(this.timerId);\r\n      this.timerId = this.window.setTimeout(this.onCallback, this.remaining);\r\n    }\r\n  }\r\n\r\n  public cancel() {\r\n    if (this.timerId) {\r\n      this.window.clearTimeout(this.timerId);\r\n    }\r\n  }\r\n\r\n  public destroy() {\r\n    this.cancel();\r\n    this.callback = () => {};\r\n  }\r\n\r\n  private onCallback() {\r\n    this.timerId = null;\r\n    this.callback();\r\n  }\r\n}\r\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport './card.scss';\n\ninterface CardProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nfunction Card({ children, className }: CardProps) {\n  return <div className={clsx('card', className)}>{children}</div>;\n}\n\nCard.defaultProps = {\n  className: '',\n};\n\nexport default Card;\n","import clsx from 'clsx';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './menu-link.scss';\n\ntype MenuLinkType = 'primary' | 'secondary' | 'default';\n\ninterface MenuLinkProps {\n  to: string;\n  type?: MenuLinkType;\n  children: React.ReactNode;\n}\n\nfunction MenuLink({ to, type, children }: MenuLinkProps) {\n  return (\n    <Link className={clsx(`menu-link`, `menu-link--${type}`)} to={to}>\n      {children}\n    </Link>\n  );\n}\n\nMenuLink.defaultProps = {\n  type: 'default',\n};\n\nexport default MenuLink;\n","import React from 'react';\r\n\r\nimport Card from '../../../components/card/card';\r\nimport MenuButton from '../../../components/menu-button/menu-button';\r\nimport MenuLink from '../../../components/menu-link/menu-link';\r\nimport './game-over.scss';\r\n\r\ninterface GameOverProps {\r\n  onRestart: () => void;\r\n}\r\n\r\nfunction GameOver({ onRestart }: GameOverProps) {\r\n  return (\r\n    <Card className=\"game-over\">\r\n      <h2 className=\"game-over__title\">Game over!</h2>\r\n      <MenuButton\r\n        onClick={() => {\r\n          onRestart();\r\n        }}\r\n      >\r\n        Restart\r\n      </MenuButton>\r\n      <MenuLink to=\"/high-score\" type=\"secondary\">\r\n        High Score\r\n      </MenuLink>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default GameOver;\r\n","import React from 'react';\r\n\r\nimport Card from '../../../components/card/card';\r\nimport './paused.scss';\r\n\r\nfunction Paused() {\r\n  return (\r\n    <div className=\"paused\">\r\n      <div className=\"paused__backdrop\" />\r\n      <Card className=\"paused__card\">\r\n        <h2 className=\"paused__title\">Paused</h2>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Paused;\r\n","import clsx from 'clsx';\r\nimport React from 'react';\r\n\r\nimport Card from '../../../components/card/card';\r\nimport './score.scss';\r\n\r\ninterface ScoreProps {\r\n  score?: number;\r\n  className?: string;\r\n}\r\n\r\nfunction Score({ score, className }: ScoreProps) {\r\n  return (\r\n    <Card className={clsx('score', className)}>\r\n      <p>\r\n        <span>SCORE: </span>\r\n        <span>{score}</span>\r\n      </p>\r\n    </Card>\r\n  );\r\n}\r\n\r\nScore.defaultProps = {\r\n  score: 0,\r\n  className: '',\r\n};\r\n\r\nexport default Score;\r\n","import React, { MutableRefObject, useEffect, useRef, useState } from 'react';\r\n\r\nimport MobileControls from '../../components/mobile-controls/mobile-controls';\r\nimport SnakeGame from '../../components/snake-game/snake-game';\r\nimport Board from '../../engine/Board';\r\nimport CellPositionService from '../../engine/CellPositionService';\r\nimport GameEngine from '../../engine/Game';\r\nimport KeyboardService from '../../engine/KeyboardService';\r\nimport ScoreService from '../../engine/ScoreService';\r\nimport TimerService from '../../engine/Utils/TimerService';\r\nimport { GameSnapshot } from '../../engine/Utils/utils';\r\nimport GameOver from './game-over/game-over';\r\nimport './game.scss';\r\nimport Paused from './paused/paused';\r\nimport Score from './score/score';\r\n\r\nconst cellSize = 35;\r\n\r\nfunction Game() {\r\n  const [score, setScore] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [paused, setPaused] = useState(false);\r\n  const [game, setGame] = useState<GameEngine | null>(null);\r\n\r\n  const boardRef = useRef<HTMLDivElement>() as MutableRefObject<HTMLDivElement>;\r\n\r\n  useEffect(() => {\r\n    const engine = initGame();\r\n    setGame(engine);\r\n    return () => {\r\n      engine.destroy();\r\n    };\r\n  }, []);\r\n\r\n  const initGame = (): GameEngine => {\r\n    const boardBoundingRect = boardRef.current.getBoundingClientRect();\r\n\r\n    const widthCells = Math.floor(boardBoundingRect.width / cellSize);\r\n    const heightCells = Math.floor(boardBoundingRect.height / cellSize);\r\n\r\n    const engine = new GameEngine({\r\n      window,\r\n      keyboardService: new KeyboardService({ window }),\r\n      scoreService: new ScoreService(),\r\n      board: new Board({\r\n        widthCells,\r\n        heightCells,\r\n        cellPositionService: new CellPositionService(),\r\n      }),\r\n      timerService: new TimerService({ window }),\r\n    });\r\n\r\n    engine.onSnapshotSubject.attach((gameSnapshot: GameSnapshot) => {\r\n      setScore(gameSnapshot.score);\r\n    });\r\n\r\n    engine.onGameOverSubject.attach(() => {\r\n      setPaused(false);\r\n      setGameOver(true);\r\n    });\r\n\r\n    engine.onPauseSubject.attach(() => {\r\n      if (engine.getState() === 'over') return;\r\n      setPaused((pausedState) => !pausedState);\r\n    });\r\n    return engine;\r\n  };\r\n\r\n  const restart = () => {\r\n    if (game) {\r\n      setGameOver(false);\r\n      game.restartGame();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <Score score={score} />\r\n      <div className=\"game__board\" ref={boardRef}>\r\n        <SnakeGame gameEngine={game} />\r\n      </div>\r\n      {gameOver ? <GameOver onRestart={restart} /> : null}\r\n      {paused && !gameOver ? <Paused /> : null}\r\n      <MobileControls />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import {\r\n  IKeyboardService,\r\n  KeyboardServiceConfig,\r\n} from '../../engine/KeyboardService';\r\nimport DirectionSubject from '../../engine/Utils/DirectionSubject';\r\nimport TriggerSubject from '../../engine/Utils/TriggerSubject';\r\nimport { Direction, GameWindow, randomBetween } from '../../engine/Utils/utils';\r\n\r\nconst directions = ['up', 'down', 'left', 'right'];\r\n\r\nexport default class DemoKeyboardService implements IKeyboardService {\r\n  private window: GameWindow;\r\n\r\n  isInverse = false;\r\n\r\n  interval: number | null = null;\r\n\r\n  public onSpaceSubject = new TriggerSubject();\r\n\r\n  public onDirectionSubject = new DirectionSubject();\r\n\r\n  constructor({ window }: KeyboardServiceConfig) {\r\n    this.window = window;\r\n    this.triggerRandomDirectionKey = this.triggerRandomDirectionKey.bind(this);\r\n  }\r\n\r\n  public init() {\r\n    this.setInterval();\r\n  }\r\n\r\n  public destroy() {\r\n    this.clearInterval();\r\n  }\r\n\r\n  setInterval() {\r\n    this.interval = this.window.setInterval(\r\n      this.triggerRandomDirectionKey,\r\n      1000\r\n    );\r\n  }\r\n\r\n  clearInterval() {\r\n    if (this.interval) {\r\n      this.window.clearInterval(this.interval);\r\n    }\r\n  }\r\n\r\n  triggerRandomDirectionKey() {\r\n    this.onDirectionSubject.notify(\r\n      directions[randomBetween(0, directions.length - 1)] as Direction\r\n    );\r\n  }\r\n\r\n  public inverse() {\r\n    this.isInverse = !this.isInverse;\r\n  }\r\n}\r\n","import React, { MutableRefObject, useEffect, useRef, useState } from 'react';\r\n\r\nimport Board from '../../engine/Board';\r\nimport CellPositionService from '../../engine/CellPositionService';\r\nimport GameEngine from '../../engine/Game';\r\nimport ScoreService from '../../engine/ScoreService';\r\nimport TimerService from '../../engine/Utils/TimerService';\r\nimport SnakeGame from '../snake-game/snake-game';\r\nimport DemoKeyboardService from './DemoKeyboardService';\r\nimport './demo-snake-game.scss';\r\n\r\nconst cellSize = 35;\r\n\r\nfunction DemoSnakeGame() {\r\n  const [game, setGame] = useState<GameEngine | null>(null);\r\n\r\n  const boardRef = useRef<HTMLDivElement>() as MutableRefObject<HTMLDivElement>;\r\n\r\n  useEffect(() => {\r\n    const engine = initGame();\r\n    setGame(engine);\r\n\r\n    return () => {\r\n      engine.destroy();\r\n    };\r\n  }, []);\r\n\r\n  const initGame = (): GameEngine => {\r\n    const boardBoundingRect = boardRef.current?.getBoundingClientRect();\r\n\r\n    const widthCells = Math.floor(boardBoundingRect.width / cellSize);\r\n    const heightCells = Math.floor(boardBoundingRect.height / cellSize);\r\n\r\n    const engine = new GameEngine({\r\n      window,\r\n      keyboardService: new DemoKeyboardService({ window }),\r\n      scoreService: new ScoreService(),\r\n      board: new Board({\r\n        widthCells,\r\n        heightCells,\r\n        cellPositionService: new CellPositionService(),\r\n      }),\r\n      timerService: new TimerService({ window }),\r\n    });\r\n\r\n    engine.onGameOverSubject.attach(() => {\r\n      engine.restartGame();\r\n    });\r\n\r\n    return engine;\r\n  };\r\n\r\n  return (\r\n    <div className=\"demo-snake-game\">\r\n      <div className=\"demo-snake-game__board\" ref={boardRef}>\r\n        <SnakeGame gameEngine={game} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DemoSnakeGame;\r\n","import React from 'react';\n\nimport Card from '../../components/card/card';\nimport DemoSnakeGame from '../../components/demo-snake-game/demo-snake-game';\nimport MenuLink from '../../components/menu-link/menu-link';\nimport ScoreService from '../../engine/ScoreService';\nimport './high-score.scss';\n\nfunction HighScore() {\n  const scores = ScoreService.getScores();\n  const content = scores.length ? (\n    <>\n      <h2>Highscore</h2>\n      {scores.reverse().map((score) => (\n        <p key={Math.random()}>{score}</p>\n      ))}\n    </>\n  ) : (\n    <h2>No scores yet!</h2>\n  );\n\n  return (\n    <div className=\"high-score\">\n      <DemoSnakeGame />\n      <Card>\n        {content}\n        <MenuLink to=\"/game\">Start new game</MenuLink>\n      </Card>\n    </div>\n  );\n}\n\nexport default HighScore;\n","import clsx from 'clsx';\nimport React from 'react';\n\nimport Card from '../../../components/card/card';\nimport MenuLink from '../../../components/menu-link/menu-link';\nimport './home-menu.scss';\n\ninterface HomeMenuProps {\n  className?: string;\n}\n\nfunction HomeMenu({ className }: HomeMenuProps) {\n  return (\n    <Card className={clsx('home-menu', className)}>\n      <h2 className=\"home-menu__title\">Snake</h2>\n      <MenuLink to=\"/game\" type=\"primary\">\n        Start\n      </MenuLink>\n      <MenuLink to=\"/high-score\" type=\"secondary\">\n        High Score\n      </MenuLink>\n    </Card>\n  );\n}\n\nHomeMenu.defaultProps = {\n  className: '',\n};\n\nexport default HomeMenu;\n","import React from 'react';\r\n\r\nimport DemoSnakeGame from '../../components/demo-snake-game/demo-snake-game';\r\nimport HomeMenu from './home-menu/home-menu';\r\nimport './home.scss';\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"home\">\r\n      <DemoSnakeGame />\r\n      <HomeMenu className=\"home__menu\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport './App.css';\nimport Audio from './components/audio/audio';\nimport Game from './pages/game/game';\nimport HighScore from './pages/high-score/high-score';\nimport Home from './pages/home/home';\n\nexport default function App() {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route path=\"/high-score\">\n            <HighScore />\n          </Route>\n          <Route path=\"/game\">\n            <Game />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n      <Audio />\n    </>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}